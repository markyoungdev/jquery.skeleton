#!/usr/bin/env node

const path    = require("path")
    , fs      = require("fs.extra")
    , program = require("commander")
    , version = JSON.parse(fs.readFileSync(__dirname + '/../package.json')).version
    , exec    = require('child_process').exec
    , _       = require("underscore")
    , _s      = require("underscore.string")

program
  .version(version)
  .option('-i, --init', "Initializes the current project folder. You'll get TDD, minification, folder structure, ...")
  .option('-u, --update', "Update some parts of the current project folder.")
  .option('-l, --license', "Add the MIT license to the project folder and the README.")
  .parse(process.argv)

var createFolder = function(path) {
  try {
    fs.mkdirSync(path)
    console.log('Successfully created the folder: ' + path)
  } catch(e) {
    console.log('Skipped creation of the folder: ' + path)
  }
}

var copyFile = function(src, dest, callback) {
  fs.copy(src, dest, function(err) {
    if(err) {
      throw err
    } else {
      console.log('Copied file successfully: ' + src)
      callback && callback()
    }
  })
}

var getTargetProjectName = function() {
  return process.cwd().replace(/.*jquery\./, '')
}

var replaceSkeletonInFile = function(file) {
  var content = fs.readFileSync(file).toString().toString()

  content = content
    .replace('$.fn.skeleton', '$.fn.' + _s.camelize(getTargetProjectName().replace('.', '_')))
    .replace("'skeleton'", "'" + getTargetProjectName() + "'")
    .replace('jquery.skeleton', 'jquery.' + getTargetProjectName())
    .replace('prints "skeleton"', 'prints "' + getTargetProjectName() + '"')
    .replace('this.element.skeleton()', 'this.element.' + _s.camelize(getTargetProjectName().replace('.', '_')) + '()')

  fs.writeFileSync(file, content)
}

var addTestCommandToPackageFile = function() {
  var sourcePackageContent = JSON.parse(fs.readFileSync(__dirname + '/../package.json'))
    , targetPackageContent = JSON.parse(fs.readFileSync(process.cwd() + '/package.json'))

  targetPackageContent.scripts = targetPackageContent.scripts || {}
  targetPackageContent.scripts.test = sourcePackageContent.scripts.test

  fs.writeFileSync(process.cwd() + '/package.json', JSON.stringify(targetPackageContent, null, 2))
}

var addBusterJsDependencyToPackageFile = function() {
  var sourcePackageContent = JSON.parse(fs.readFileSync(__dirname + '/../package.json'))
    , targetPackageContent = JSON.parse(fs.readFileSync(process.cwd() + '/package.json'))

  targetPackageContent.dependencies = targetPackageContent.dependencies || {}
  targetPackageContent.dependencies.buster = sourcePackageContent.dependencies.buster

  fs.writeFileSync(process.cwd() + '/package.json', JSON.stringify(targetPackageContent, null, 2))
}

var addTravisConfig = function() {
  var packageContent = JSON.parse(fs.readFileSync(process.cwd() + '/package.json'))
    , travisContent  = fs.readFileSync(process.cwd() + '/.travis.yml').toString()
    , email          = packageContent.author.match(/<(.*)>/)

  if(email) {
    email = email[1]
    travisContent = travisContent.replace('- sascha@depold.com', '- ' + email)
  } else {
    travisContent = travisContent.replace("\nnotifications:\n  email:\n    - sascha@depold.com\n", '')
  }

  fs.writeFileSync(process.cwd() + '/.travis.yml', travisContent)
}

var addLicense = function() {
  var readmePath = process.cwd() + 'README.md'
    , readme     = null

  try {
    readme = fs.readFileSync(readmePath)
  } catch(e) {
    readme = ""
  }

  if(readme.indexOf('## License') === -1) {
    readme += "\n\n## License\n\nHereby place under MIT license."
    console.log(readme)
    fs.writeFileSync(readmePath, readme)
  }
}

if(program.init) {
  createFolder(process.cwd() + '/dist')
  createFolder(process.cwd() + '/lib')
  createFolder(process.cwd() + '/spec')
  createFolder(process.cwd() + '/src')

  var files = ['dist/compiler.jar', 'lib/jquery-1.7.2.min.js', 'spec/buster.js']

  files.forEach(function(file) {
    copyFile(__dirname + '/../' + file, process.cwd() + '/' + file)
  })

  copyFile(__dirname + '/../spec/jquery.skeleton.spec.js', process.cwd() + '/spec/jquery.' + getTargetProjectName() + '.spec.js', function() {
    replaceSkeletonInFile(process.cwd() + '/spec/jquery.' + getTargetProjectName() + '.spec.js')
  })

  copyFile(__dirname + '/../src/jquery.skeleton.js', process.cwd() + '/src/jquery.' + getTargetProjectName() + '.js', function() {
    replaceSkeletonInFile(process.cwd() + '/src/jquery.' + getTargetProjectName() + '.js')
  })

  copyFile(__dirname + '/../.travis.yml', process.cwd() + '/.travis.yml', function() {
    addTravisConfig()
  })

  addTestCommandToPackageFile()
  addBusterJsDependencyToPackageFile()
}

if(program.update) {
  addTestCommandToPackageFile()
  addBusterJsDependencyToPackageFile()
}

if(program.license) {
  copyFile(__dirname + '/../MIT-LICENSE', process.cwd() + '/MIT-LICENSE')
  addLicense()
}
